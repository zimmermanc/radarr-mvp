name: Build & Quality

on:
  push:
    branches: [ main, develop ]
    # Skip workflow for documentation-only changes
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  SQLX_OFFLINE: true

jobs:
  # Fast formatting and basic checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_run_full: ${{ steps.changes.outputs.code_changed }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for code changes
        id: changes
        run: |
          if git diff --name-only HEAD~1..HEAD | grep -E '\.(rs|toml|yml|yaml|js|ts|tsx)$'; then
            echo "code_changed=true" >> $GITHUB_OUTPUT
          else
            echo "code_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install Rust toolchain
        if: steps.changes.outputs.code_changed == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        if: steps.changes.outputs.code_changed == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        if: steps.changes.outputs.code_changed == 'true'
        run: cargo fmt --all -- --check
        
      - name: Check Cargo.toml formatting
        if: steps.changes.outputs.code_changed == 'true'
        run: |
          if ! command -v taplo &> /dev/null; then
            cargo install taplo-cli --locked
          fi
          taplo fmt --check

  # Comprehensive build, test, and quality analysis
  build-test-quality:
    name: Build, Test & Quality Analysis
    needs: quick-checks
    if: needs.quick-checks.outputs.should_run_full == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install analysis tools
        run: |
          cargo install tokei --locked
          # cargo-count removed due to yanked dependencies
      
      - name: Clippy analysis
        run: |
          cd unified-radarr
          cargo clippy --workspace --all-targets --all-features -- -D warnings
      
      - name: Build workspace
        run: |
          cd unified-radarr
          cargo build --workspace --verbose
      
      - name: Run tests
        run: |
          cd unified-radarr
          cargo test --workspace --verbose
      
      - name: Lines of code analysis
        run: |
          cd unified-radarr
          echo "## Code Quality Report" > quality-report.md
          echo "### Lines of Code" >> quality-report.md
          tokei . --output markdown >> quality-report.md
          echo "### Clippy Analysis: PASSED" >> quality-report.md
          echo "### Tests: PASSED" >> quality-report.md
      
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: unified-radarr/quality-report.md

  # Cross-platform validation (reduced scope)
  cross-platform:
    name: Cross-platform Build
    needs: [quick-checks, build-test-quality]
    if: needs.quick-checks.outputs.should_run_full == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build only (no tests for speed)
        run: |
          cd unified-radarr
          cargo build --workspace