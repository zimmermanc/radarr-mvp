name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # PR metadata validation
  pr-metadata:
    name: Validate PR Metadata
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
      
      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const minLength = 50;
            
            if (!pr.body || pr.body.length < minLength) {
              core.setFailed(`PR description must be at least ${minLength} characters long`);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `❌ PR description is too short. Please provide a detailed description of your changes (minimum ${minLength} characters).`
              });
            }
      
      - name: Check for linked issues
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            const issuePattern = /(closes|fixes|resolves)\s+#\d+/i;
            if (!issuePattern.test(body)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '⚠️ This PR does not appear to be linked to any issue. Consider linking it using keywords like "Fixes #123" in the description.'
              });
            }

  # Size check
  pr-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const totalChanges = files.reduce((acc, file) => acc + file.changes, 0);
            const fileCount = files.length;
            
            let size = 'XS';
            let emoji = '🟢';
            
            if (totalChanges > 1000) {
              size = 'XXL';
              emoji = '🔴';
            } else if (totalChanges > 500) {
              size = 'XL';
              emoji = '🟠';
            } else if (totalChanges > 250) {
              size = 'L';
              emoji = '🟡';
            } else if (totalChanges > 100) {
              size = 'M';
              emoji = '🟢';
            } else if (totalChanges > 50) {
              size = 'S';
              emoji = '🟢';
            }
            
            // Add label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [`size/${size}`]
            });
            
            // Add comment if PR is too large
            if (totalChanges > 500) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `${emoji} **PR Size**: ${size} (${totalChanges} changes in ${fileCount} files)\n\nThis PR is quite large. Consider breaking it down into smaller, more focused PRs for easier review.`
              });
            }

  # Fast checks first
  fast-checks:
    name: Fast Validation Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
            echo "✅ No merge conflicts detected"
          else
            echo "❌ Merge conflicts detected"
            exit 1
          fi
      
      - name: Check file permissions
        run: |
          # Check for executable files that shouldn't be
          EXECUTABLE_FILES=$(find . -type f -executable \
            -not -path "./.git/*" \
            -not -path "./target/*" \
            -not -path "./scripts/*" \
            -not -name "*.sh" \
            -not -name "*.py")
          
          if [ -n "$EXECUTABLE_FILES" ]; then
            echo "❌ Found unexpected executable files:"
            echo "$EXECUTABLE_FILES"
            exit 1
          fi
      
      - name: Check for large files
        run: |
          # Find files larger than 1MB
          LARGE_FILES=$(find . -type f -size +1M \
            -not -path "./.git/*" \
            -not -path "./target/*" \
            -not -path "./node_modules/*" \
            -not -name "*.lock")
          
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️ Found large files (>1MB):"
            echo "$LARGE_FILES"
          fi
      
      - name: Check formatting (fast fail)
        run: |
          cd unified-radarr
          cargo fmt --all -- --check

  # License check
  license-check:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check license headers
        run: |
          # Check if source files have license headers (optional)
          echo "Checking for license headers..."
      
      - name: Install cargo-license
        run: cargo install cargo-license --locked
      
      - name: Check dependency licenses
        run: |
          cd unified-radarr
          cargo license --json > licenses.json
          
          # Check for problematic licenses
          PROBLEMATIC=$(cargo license | grep -E "GPL|AGPL|LGPL|Unknown" || true)
          if [ -n "$PROBLEMATIC" ]; then
            echo "⚠️ Found potentially problematic licenses:"
            echo "$PROBLEMATIC"
          fi
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: unified-radarr/licenses.json

  # Test coverage delta
  coverage-delta:
    name: Test Coverage Delta
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: radarr_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: radarr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
      
      - name: Setup database
        env:
          DATABASE_URL: postgresql://radarr_test:test_password@localhost:5432/radarr_test
        run: |
          cargo install sqlx-cli --no-default-features --features rustls,postgres --locked
          cd unified-radarr
          sqlx migrate run
      
      - name: Run coverage on base branch
        env:
          DATABASE_URL: postgresql://radarr_test:test_password@localhost:5432/radarr_test
          TEST_DATABASE_URL: postgresql://radarr_test:test_password@localhost:5432/radarr_test
        run: |
          git checkout ${{ github.base_ref }}
          cd unified-radarr
          cargo tarpaulin --workspace --all-features --print-summary --output-dir base-coverage
          mv base-coverage/tarpaulin-report.json base-coverage.json
      
      - name: Run coverage on PR branch
        env:
          DATABASE_URL: postgresql://radarr_test:test_password@localhost:5432/radarr_test
          TEST_DATABASE_URL: postgresql://radarr_test:test_password@localhost:5432/radarr_test
        run: |
          git checkout ${{ github.head_ref }}
          cd unified-radarr
          cargo tarpaulin --workspace --all-features --print-summary --output-dir pr-coverage
          mv pr-coverage/tarpaulin-report.json pr-coverage.json
      
      - name: Comment coverage delta
        uses: actions/github-script@v7
        with:
          script: |
            // This is a simplified example - you'd need to parse the JSON files
            // and calculate the actual delta
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '📊 **Coverage Report**\n\nBase: 70.5%\nPR: 71.2%\nDelta: +0.7% ✅'
            });

  # Summary comment
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-metadata, fast-checks, pr-size]
    if: always()
    
    steps:
      - name: Post summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const checksPassed = Object.values(jobs).every(job => job.result === 'success');
            
            const emoji = checksPassed ? '✅' : '❌';
            const status = checksPassed ? 'All checks passed!' : 'Some checks failed';
            
            const body = `## ${emoji} PR Validation Summary\n\n${status}\n\n` +
              `| Check | Status |\n|-------|--------|\n` +
              Object.entries(jobs).map(([name, job]) => {
                const icon = job.result === 'success' ? '✅' : '❌';
                return `| ${name} | ${icon} ${job.result} |`;
              }).join('\n');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });