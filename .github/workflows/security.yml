name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/rust
            p/sql-injection
            p/command-injection
          generateSarif: true
      
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
        # Note: Rust support for CodeQL is limited
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Rust Security Audit
  cargo-audit:
    name: Cargo Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      
      - name: Run cargo audit
        run: |
          cd unified-radarr
          cargo audit --json > audit-results.json
          cargo audit
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cargo-audit-results
          path: unified-radarr/audit-results.json

  # Dependency License Check
  cargo-deny:
    name: Cargo Deny Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deny
        run: cargo install cargo-deny --locked
      
      - name: Create deny.toml if not exists
        run: |
          cd unified-radarr
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          [licenses]
          unlicensed = "deny"
          allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
          ]
          copyleft = "warn"
          
          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          
          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/rustsec/advisory-db"]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "warn"
          notice = "warn"
          EOF
          fi
      
      - name: Run cargo deny
        run: |
          cd unified-radarr
          cargo deny check

  # Secret Detection
  gitleaks:
    name: GitLeaks Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # TruffleHog Secret Scanning
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Software Composition Analysis (SCA)
  snyk:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk.json
      
      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk.json

  # OWASP Dependency Check
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'radarr-mvp'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  # Container Scanning (if Dockerfile exists)
  trivy-container:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if Dockerfile exists
        id: dockerfile_exists
        run: |
          if [ -f "unified-radarr/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image
        if: steps.dockerfile_exists.outputs.exists == 'true'
        run: |
          cd unified-radarr
          docker build -t radarr-mvp:${{ github.sha }} .
      
      - name: Run Trivy vulnerability scanner
        if: steps.dockerfile_exists.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: radarr-mvp:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        if: steps.dockerfile_exists.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Generate SBOM (Software Bill of Materials)
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-sbom
        run: cargo install cargo-sbom --locked
      
      - name: Generate SBOM
        run: |
          cd unified-radarr
          cargo sbom > sbom.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: unified-radarr/sbom.json
      
      - name: Submit SBOM to Dependency Track
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.DEPENDENCY_TRACK_URL }}" ]; then
            curl -X POST ${{ secrets.DEPENDENCY_TRACK_URL }}/api/v1/bom \
              -H "X-Api-Key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d @unified-radarr/sbom.json
          fi