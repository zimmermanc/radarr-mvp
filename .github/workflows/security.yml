name: Security Scanning

on:
  push:
    branches: [ main, develop ]
    # Only run on code changes that could affect security
    paths:
      - '**/*.rs'
      - '**/*.toml'
      - '.github/workflows/**'
      - 'migrations/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.rs'
      - '**/*.toml'
      - '.github/workflows/**'
      - 'migrations/**'
      - 'scripts/**'
  schedule:
    # Run full security scan weekly (Sundays at 2 AM UTC)
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Comprehensive security analysis
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-security-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-security-
      
      # Secret Detection with GitLeaks
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
      
      # Dependency vulnerability scanning
      - name: Security audit
        run: |
          cargo install cargo-audit --locked
          cargo audit --json --output audit-results.json
          cargo audit
      
      # Static Application Security Testing
      - name: Semgrep SAST Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/rust
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      # Supply chain security
      - name: Generate SBOM
        run: |
          if ! command -v cargo-cyclonedx &> /dev/null; then
            cargo install cargo-cyclonedx --locked
          fi
          cargo cyclonedx --format json --output sbom.json
      
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-results.json
            sbom.json