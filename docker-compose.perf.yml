version: '3.8'

services:
  # PostgreSQL Database for Performance Testing
  postgres-perf:
    image: postgres:16-alpine
    container_name: radarr-postgres-perf
    environment:
      POSTGRES_DB: radarr
      POSTGRES_USER: radarr
      POSTGRES_PASSWORD: radarr_password
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 64MB
      POSTGRES_MAINTENANCE_WORK_MEM: 256MB
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    ports:
      - "5432:5432"
    volumes:
      - postgres_perf_data:/var/lib/postgresql/data
      - ./scripts/perf/postgres-perf.conf:/etc/postgresql/postgresql.conf:ro
      - ./migrations:/docker-entrypoint-initdb.d:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radarr -d radarr"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '2.0'
        reservations:
          memory: 512MB
          cpus: '1.0'
    networks:
      - perf-network

  # Redis for Caching (Performance Testing)
  redis-perf:
    image: redis:7-alpine
    container_name: radarr-redis-perf
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '1.0'
    networks:
      - perf-network

  # Radarr Application for Performance Testing
  radarr-app-perf:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: radarr-app-perf
    ports:
      - "7878:7878"
    environment:
      # Database configuration
      DATABASE_URL: postgresql://radarr:radarr_password@postgres-perf:5432/radarr
      
      # Redis configuration
      REDIS_URL: redis://redis-perf:6379
      
      # Performance optimizations
      RUST_LOG: info
      RADARR_LOG_LEVEL: info
      TOKIO_WORKER_THREADS: 8
      DATABASE_MAX_CONNECTIONS: 50
      DATABASE_MIN_CONNECTIONS: 5
      DATABASE_ACQUIRE_TIMEOUT: 30
      
      # API configuration
      API_KEY: test-api-key-performance
      BIND_ADDRESS: 0.0.0.0:7878
      
      # Performance settings
      ENABLE_METRICS: true
      ENABLE_HEALTH_CHECKS: true
      REQUEST_TIMEOUT: 30
      
    depends_on:
      postgres-perf:
        condition: service_healthy
      redis-perf:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '2.0'
        reservations:
          memory: 256MB
          cpus: '0.5'
    networks:
      - perf-network

  # Performance Testing Tools Container
  perf-tools:
    image: alpine:latest
    container_name: radarr-perf-tools
    volumes:
      - ./scripts/perf:/perf-scripts
      - ./scripts/perf/results:/results
    working_dir: /perf-scripts
    command: sh -c "
      apk add --no-cache curl jq bash bc &&
      wget -O /usr/local/bin/k6 https://github.com/grafana/k6/releases/latest/download/k6-v*-linux-amd64.tar.gz &&
      tar xf /usr/local/bin/k6 -C /usr/local/bin --strip-components=1 &&
      chmod +x /usr/local/bin/k6 &&
      wget -O /tmp/vegeta.tar.gz https://github.com/tsenart/vegeta/releases/download/v12.12.0/vegeta_12.12.0_linux_amd64.tar.gz &&
      tar xf /tmp/vegeta.tar.gz -C /usr/local/bin &&
      echo 'Performance testing tools ready' &&
      tail -f /dev/null
    "
    depends_on:
      radarr-app-perf:
        condition: service_healthy
    networks:
      - perf-network

  # Prometheus for Metrics Collection
  prometheus-perf:
    image: prom/prometheus:latest
    container_name: radarr-prometheus-perf
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/perf/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_perf_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    networks:
      - perf-network

  # Grafana for Performance Visualization
  grafana-perf:
    image: grafana/grafana:latest
    container_name: radarr-grafana-perf
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_perf_data:/var/lib/grafana
      - ./scripts/perf/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./scripts/perf/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./scripts/perf/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus-perf
    networks:
      - perf-network

  # Load Balancer for Multi-Instance Testing
  nginx-perf:
    image: nginx:alpine
    container_name: radarr-nginx-perf
    ports:
      - "8080:80"
    volumes:
      - ./scripts/perf/nginx-perf.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - radarr-app-perf
    networks:
      - perf-network

volumes:
  postgres_perf_data:
    driver: local
  prometheus_perf_data:
    driver: local
  grafana_perf_data:
    driver: local

networks:
  perf-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16