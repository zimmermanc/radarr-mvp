# Docker Compose for Radarr MVP - Production Environment
version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:16-alpine
    container_name: radarr-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-radarr}
      POSTGRES_USER: ${POSTGRES_USER:-radarr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-radarr} -d ${POSTGRES_DB:-radarr}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - radarr-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: radarr-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - radarr-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Radarr MVP Application
  radarr:
    image: ${RADARR_IMAGE:-radarr-mvp:latest}
    container_name: radarr-mvp-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Server Configuration
      RADARR_HOST: 0.0.0.0
      RADARR_PORT: 7878
      RADARR_MAX_CONNECTIONS: ${RADARR_MAX_CONNECTIONS:-1000}
      
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-radarr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-radarr}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-20}
      DATABASE_CONNECT_TIMEOUT: 30
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # External Service Configuration
      PROWLARR_BASE_URL: ${PROWLARR_BASE_URL}
      PROWLARR_API_KEY: ${PROWLARR_API_KEY}
      QBITTORRENT_BASE_URL: ${QBITTORRENT_BASE_URL}
      QBITTORRENT_USERNAME: ${QBITTORRENT_USERNAME}
      QBITTORRENT_PASSWORD: ${QBITTORRENT_PASSWORD}
      
      # TMDB Configuration
      TMDB_API_KEY: ${TMDB_API_KEY}
      
      # Security
      API_KEY: ${RADARR_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      
      # Logging
      RUST_LOG: ${RUST_LOG:-info}
      LOG_JSON_FORMAT: true
      LOG_FILE: /var/log/radarr/radarr.log
    ports:
      - "${RADARR_PORT:-7878}:7878"
    volumes:
      - radarr_data:/var/lib/radarr
      - radarr_logs:/var/log/radarr
      - ${MOVIE_LIBRARY_PATH}:/media/movies:ro
      - ${DOWNLOAD_PATH}:/media/downloads
    networks:
      - radarr-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7878/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: radarr-nginx-prod
    restart: always
    depends_on:
      - radarr
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/radarr.conf:/etc/nginx/conf.d/radarr.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - radarr-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  radarr_data:
    driver: local
  radarr_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  radarr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16