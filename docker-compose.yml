# Docker Compose for Radarr MVP - Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: radarr-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: radarr_dev
      POSTGRES_USER: radarr
      POSTGRES_PASSWORD: radarr
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radarr -d radarr_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - radarr-network

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: radarr-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - radarr-network

  # Radarr MVP Application
  radarr:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: radarr-mvp-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Server Configuration
      RADARR_HOST: 0.0.0.0
      RADARR_PORT: 7878
      RADARR_MAX_CONNECTIONS: 100
      
      # Database Configuration
      DATABASE_URL: postgresql://radarr:radarr@postgres:5432/radarr_dev
      DATABASE_MAX_CONNECTIONS: 10
      DATABASE_CONNECT_TIMEOUT: 30
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # Prowlarr Integration (modify as needed)
      PROWLARR_BASE_URL: http://prowlarr:9696
      PROWLARR_API_KEY: ${PROWLARR_API_KEY:-your_prowlarr_api_key}
      
      # qBittorrent Integration (modify as needed)
      QBITTORRENT_BASE_URL: http://qbittorrent:8080
      QBITTORRENT_USERNAME: ${QBITTORRENT_USERNAME:-admin}
      QBITTORRENT_PASSWORD: ${QBITTORRENT_PASSWORD:-adminpass}
      
      # Logging
      RUST_LOG: debug
      LOG_JSON_FORMAT: true
    ports:
      - "7878:7878"
    volumes:
      - radarr_data:/var/lib/radarr
      - radarr_logs:/var/log/radarr
      # Mount media directories (adjust paths as needed)
      - ${MOVIE_LIBRARY_PATH:-./media/movies}:/media/movies
      - ${DOWNLOAD_PATH:-./media/downloads}:/media/downloads
    networks:
      - radarr-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7878/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Prowlarr for indexer management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: radarr-prowlarr-dev
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: UTC
    volumes:
      - prowlarr_config:/config
    ports:
      - "9696:9696"
    networks:
      - radarr-network
    profiles:
      - optional

  # Optional: qBittorrent for downloads
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: radarr-qbittorrent-dev
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: UTC
      WEBUI_PORT: 8080
    volumes:
      - qbittorrent_config:/config
      - ${DOWNLOAD_PATH:-./media/downloads}:/downloads
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    networks:
      - radarr-network
    profiles:
      - optional

volumes:
  postgres_data:
  redis_data:
  radarr_data:
  radarr_logs:
  prowlarr_config:
  qbittorrent_config:

networks:
  radarr-network:
    driver: bridge