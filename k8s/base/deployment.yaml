apiVersion: apps/v1
kind: Deployment
metadata:
  name: unified-radarr
  namespace: unified-radarr
  labels:
    app.kubernetes.io/component: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: unified-radarr
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: unified-radarr
        image: unified-radarr:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: unified-radarr-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: unified-radarr-secrets
              key: REDIS_PASSWORD
        - name: HDBITS_API_KEY
          valueFrom:
            secretKeyRef:
              name: unified-radarr-secrets
              key: HDBITS_API_KEY
        - name: TMDB_API_KEY
          valueFrom:
            secretKeyRef:
              name: unified-radarr-secrets
              key: TMDB_API_KEY
        envFrom:
        - configMapRef:
            name: unified-radarr-config
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: radarr-data
          mountPath: /app/data
        - name: radarr-config
          mountPath: /app/config
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: radarr-data
        persistentVolumeClaim:
          claimName: radarr-data-pvc
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-config-pvc
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - application
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unified-radarr
  namespace: unified-radarr
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-data-pvc
  namespace: unified-radarr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-pvc
  namespace: unified-radarr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: fast-ssd