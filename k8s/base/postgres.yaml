apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: unified-radarr
  labels:
    app.kubernetes.io/component: database
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-auth
              key: password
        envFrom:
        - configMapRef:
            name: postgres-config
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-vol
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - radarr
            - -d
            - radarr
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - radarr
            - -d
            - radarr
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
      volumes:
      - name: postgres-config-vol
        configMap:
          name: postgres-tuning-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: unified-radarr
  labels:
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/component: database
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: unified-radarr
  labels:
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/component: database
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-tuning-config
  namespace: unified-radarr
data:
  postgresql.conf: |
    # PostgreSQL Production Configuration
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory Settings
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    work_mem = 4MB
    maintenance_work_mem = 128MB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Performance
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Replication
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: unified-radarr
data:
  01-init-db.sql: |
    -- Radarr MVP Database Initialization
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create indexes for common queries
    CREATE INDEX IF NOT EXISTS idx_movies_tmdb_id ON movies(tmdb_id);
    CREATE INDEX IF NOT EXISTS idx_downloads_status ON downloads(status);
    CREATE INDEX IF NOT EXISTS idx_downloads_created_at ON downloads(created_at);
    
    -- Create monitoring user
    CREATE USER postgres_exporter WITH PASSWORD 'monitoring_password';
    GRANT CONNECT ON DATABASE radarr TO postgres_exporter;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO postgres_exporter;
    GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO postgres_exporter;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO postgres_exporter;