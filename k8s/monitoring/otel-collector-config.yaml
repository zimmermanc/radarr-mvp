apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: radarr-system
data:
  otel-collector.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Host metrics for Kubernetes nodes
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu:
            metrics:
              system.cpu.time:
                enabled: true
              system.cpu.utilization:
                enabled: true
          disk:
            metrics:
              system.disk.io:
                enabled: true
              system.disk.operations:
                enabled: true
          filesystem:
            metrics:
              system.filesystem.usage:
                enabled: true
              system.filesystem.utilization:
                enabled: true
          memory:
            metrics:
              system.memory.usage:
                enabled: true
              system.memory.utilization:
                enabled: true
          network:
            metrics:
              system.network.io:
                enabled: true
          process:
            mute_process_name_error: true
            metrics:
              process.cpu.time:
                enabled: true
              process.memory.usage:
                enabled: true
      
      # Kubernetes cluster metrics
      k8s_cluster:
        collection_interval: 30s
        node_conditions_to_report: [Ready, MemoryPressure, DiskPressure, PIDPressure]
        allocatable_types_to_report: [cpu, memory, storage]
      
      # Kubernetes events
      k8s_events:
        auth_type: serviceAccount
        
      # Prometheus scraping for additional metrics
      prometheus:
        config:
          global:
            scrape_interval: 30s
            evaluation_interval: 30s
          scrape_configs:
            - job_name: 'radarr-app'
              static_configs:
                - targets: ['radarr-api:8080']
              metrics_path: /metrics
              scrape_interval: 15s
            
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__

    processors:
      # Batch processor for better performance
      batch:
        timeout: 5s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      # Memory limiter to prevent OOM
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Resource processor to add additional attributes
      resource:
        attributes:
          - key: environment
            value: ${ENVIRONMENT}
            action: insert
          - key: cluster.name
            value: ${CLUSTER_NAME}
            action: insert
          - key: service.namespace
            value: radarr-system
            action: insert
          - key: k8s.cluster.name
            value: ${CLUSTER_NAME}
            action: insert
      
      # Attributes processor for trace enhancement
      attributes:
        actions:
          - key: http.user_agent
            action: delete
          - key: http.request.header.authorization
            action: delete
          - key: db.statement
            action: update
            from_attribute: db.statement
            # Redact sensitive SQL
      
      # Span processor for sampling and filtering
      probabilistic_sampler:
        hash_seed: 22
        sampling_percentage: 10  # Sample 10% of traces
      
      # Transform processor for custom metrics
      transform:
        metric_statements:
          - context: metric
            statements:
              # Add custom labels to Radarr metrics
              - set(attributes["app"], "radarr") where name == "http_requests_total"
              - set(attributes["component"], "api") where name == "http_request_duration_seconds"

    exporters:
      # Prometheus exporter for metrics
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: radarr
        const_labels:
          environment: ${ENVIRONMENT}
          cluster: ${CLUSTER_NAME}
        send_timestamps: true
        metric_expiration: 10m
        enable_open_metrics: true
      
      # Jaeger exporter for traces
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
      
      # Prometheus remote write (for long-term storage)
      prometheusremotewrite:
        endpoint: ${PROMETHEUS_REMOTE_WRITE_ENDPOINT}
        headers:
          Authorization: "Bearer ${PROMETHEUS_REMOTE_WRITE_TOKEN}"
        tls:
          insecure: false
        timeout: 30s
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          max_interval: 30s
          max_elapsed_time: 300s
      
      # Loki exporter for logs
      loki:
        endpoint: http://loki:3100/loki/api/v1/push
        labels:
          attributes:
            service.name: "service_name"
            service.version: "service_version"
            environment: "environment"
          resource:
            k8s.namespace.name: "k8s_namespace_name"
            k8s.pod.name: "k8s_pod_name"
            k8s.container.name: "k8s_container_name"
      
      # Tempo exporter for distributed tracing
      otlp/tempo:
        endpoint: http://tempo:4317
        tls:
          insecure: true
        headers:
          X-Scope-OrgID: "radarr"
      
      # Debug exporter for troubleshooting
      debug:
        verbosity: basic
        sampling_initial: 5
        sampling_thereafter: 200

    extensions:
      # Health check extension
      health_check:
        endpoint: 0.0.0.0:13133
      
      # Performance profiler
      pprof:
        endpoint: 0.0.0.0:1777
      
      # zPages for debugging
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        # Traces pipeline
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, resource, attributes, probabilistic_sampler]
          exporters: [jaeger, otlp/tempo, debug]
        
        # Metrics pipeline
        metrics:
          receivers: [otlp, hostmetrics, k8s_cluster, prometheus]
          processors: [memory_limiter, batch, resource, transform]
          exporters: [prometheus, prometheusremotewrite]
        
        # Logs pipeline
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch, resource]
          exporters: [loki, debug]
        
        # Host metrics pipeline
        metrics/host:
          receivers: [hostmetrics]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus]
        
        # Kubernetes metrics pipeline
        metrics/k8s:
          receivers: [k8s_cluster, k8s_events]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus]
      
      telemetry:
        logs:
          level: "info"
          development: false
          encoding: "json"
          disable_caller: false
          disable_stacktrace: false
          sampling:
            initial: 5
            thereafter: 200
        metrics:
          level: basic
          address: 0.0.0.0:8888